package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpiutil.math.MathUtil;
import frc.robot.Constants;


public class Drum extends PIDSubsystem {
    // Drum motor
    public WPI_TalonSRX motor = new WPI_TalonSRX(Constants.Drum.MotorID);

    // Current setpoint
    public int currentSetpoint;

    private DigitalInput limitSwitch = new DigitalInput(Constants.Drum.LimitSwitch);

    private boolean isHoming = false;
    private boolean isHomed = false;

    private double lastTime = 0.0;

    private int ballCount = 0;

    private boolean turning = false;

    /**
     * Drum constructor
     */
    public Drum() {
        // Set our PID values
        super(new PIDController(Constants.Drum.kP, Constants.Drum.kI, Constants.Drum.kD));

        // Set the tolerance
        getController().setTolerance(Constants.Drum.tolerance);

        // Encoder
        this.motor.setSelectedSensorPosition(0);

        // Break Mode
        this.motor.setNeutralMode(NeutralMode.Brake);
    }

    /**
     * turnToAngle
     * @param angle angle to turn to (in degrees)
     */
    public void moveToNext() {
        this.enable();
        this.currentSetpoint = this.currentSetpoint + (-((int)((409600/360)*(360/5))));
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    public void makeSetpoint(int sp) {
        this.currentSetpoint = sp;
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    public int getBallCount() {
        return this.ballCount;
    }

    public void removeBall() {
        this.ballCount--;
    }

    public void addBall() {
        this.ballCount++;
    }

    /**
     * Use the output generated by the PID
     */
    @Override
    public void useOutput(double output, double setpoint) {
        // Debugging logs
        System.out.println("CurrentPos: " + getMeasurement());
        System.out.println("Wanted: " + this.currentSetpoint);
        System.out.println("OUTPUT: " +  output);

        // Output
        // if (!this.isHoming) {
        this.motor.pidWrite(MathUtil.clamp(output,-Constants.Drum.speed,Constants.Drum.speed));
        // }

        boolean lastTurning = this.turning;
        if (output < 0.1) {
            this.turning = false;
        } else {
            this.turning = true;
        }
        if (lastTurning != this.turning) {
            System.out.println(this.turning);
        }
        // System.out.println(this.turning);
    }

    public boolean isTurning() {
        return this.turning;
    }

    /**
     * Get the encoder position
     */
    @Override
    public double getMeasurement() {
        return this.motor.getSelectedSensorPosition();
    }

    public void DrumPeriodic() {
        if (Timer.getFPGATimestamp()-this.lastTime>0.75) {
            System.out.println(this.motor.getSelectedSensorPosition());
            this.lastTime = Timer.getFPGATimestamp();
        }
    }

    public boolean isLimitPressed() {
        return !this.limitSwitch.get();
    }

    public WPI_TalonSRX getMotor() {
        return this.motor;
    }
}
