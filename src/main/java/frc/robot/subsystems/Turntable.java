package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpiutil.math.MathUtil;
import frc.robot.Constants;
import frc.robot.Robot;


public class Turntable extends PIDSubsystem {
    // turntable motor
    public WPI_TalonSRX tableMotor = new WPI_TalonSRX(Constants.Turntable.MotorID);

    // Current setpoint
    private int currentSetpoint;

    private DigitalInput limitSwitch = new DigitalInput(Constants.Turntable.LimitSwitch);

    private boolean isHoming = false;
    private boolean isHomed = false;

    private double lastTime = 0.0;

    /**
     * Turntable constructor
     */
    public Turntable() {
        // Set our PID values
        super(new PIDController(Constants.Turntable.kP, Constants.Turntable.kI, Constants.Turntable.kD));

        // Set the tolerance
        getController().setTolerance(Constants.Turntable.tolerance);

        // Encoder
        this.tableMotor.setSelectedSensorPosition(0);

        // Break Mode
        this.tableMotor.setNeutralMode(NeutralMode.Brake);
    }

    /**
     * turnToAngle
     * @param angle angle to turn to (in degrees)
     */
    public void turnToAngle(double angle) {
        System.out.println("Wanted Angle: " + angle);
        this.currentSetpoint = (int)((16384/360)*angle);
        System.out.println("Current setpoint: " + this.currentSetpoint);
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    /**
     * atTarget
     * @return whether we are at target
     */
    public boolean atTarget() {
        boolean r = (this.currentSetpoint<getMeasurement() && this.currentSetpoint>getMeasurement());
        if (r) {
            disable();
            tableMotor.set(0);
        }
        return r;
    }

    /**
     * Use the output generated by the PID
     */
    @Override
    public void useOutput(double output, double setpoint) {
        // Debugging logs
        System.out.println("CurrentPos: " + getMeasurement());
        System.out.println("Wanted: " + this.currentSetpoint);
        System.out.println("OUTPUT: " +  output);

        // Output
        if (!this.isHoming) {
            tableMotor.set(MathUtil.clamp(output,-Constants.Turntable.speed,Constants.Turntable.speed));
        }
    }

    /**
     * Get the encoder position
     */
    @Override
    public double getMeasurement() {
        return tableMotor.getSelectedSensorPosition();
    }

    public void turntablePeriodic() {
        if (Timer.getFPGATimestamp()-this.lastTime > 0.5) {
            // System.out.println(getMeasurement());
            this.lastTime = Timer.getFPGATimestamp();
        }
    }

    /**
     * Home the turntable
     */
    public void home() {
        System.out.println("Starting homing..");
        this.enable();
        this.isHoming = true;
    }

    public boolean isLimitPressed() {
        return !this.limitSwitch.get();
    }

    public WPI_TalonSRX getMotor() {
        return this.tableMotor;
    }
}
