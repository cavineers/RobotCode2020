package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpiutil.math.MathUtil;
import frc.robot.Constants;
import frc.robot.Robot;


public class Hood extends PIDSubsystem {
    // turntable motor
    private WPI_TalonSRX hoodMotor = new WPI_TalonSRX(Constants.Hood.MotorID);

    // Current setpoint
    private int currentSetpoint;

    private double lastTime = 0.0;

    private DigitalInput limitSwitch = new DigitalInput(Constants.Hood.LimitSwitch);

    /**
     * Turntable constructor
     */
    public Hood() {
        // Set our PID values
        super(new PIDController(Constants.Hood.kP, Constants.Hood.kI, Constants.Hood.kD));

        // Set the tolerance
        getController().setTolerance(Constants.Hood.tolerance);

        // Encoder
        hoodMotor.setSelectedSensorPosition(0);

        this.lastTime = Timer.getFPGATimestamp();
    }

    /**
     * turnToAngle
     * @param angle angle to turn to (in degrees)
     */
    public void turnToAngle(double angle) {
        Robot.logger.logln(angle);
        this.currentSetpoint = (int)((4096/360)*angle);
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    /**
     * atTarget
     * @return whether we are at target
     */
    public boolean atTarget() {
        boolean r = (this.currentSetpoint-5<getMeasurement() && this.currentSetpoint+5>getMeasurement());
        if (r) {
            disable();
            hoodMotor.set(0);
        }
        return r;
    }

    /**
     * Home the hood
     */
    public void home() {

    }

    /**
     * Use the output generated by the PID
     */
    @Override
    public void useOutput(double output, double setpoint) {
        // Debugging logs
        Robot.logger.logln("CurrentPos: " + getMeasurement());
        Robot.logger.logln("Wanted: " + this.currentSetpoint);
        Robot.logger.logln("OUTPUT: " +  output);

        // Output
        hoodMotor.set(MathUtil.clamp(output,-0.1,0.1));
    }

    /**
     * Get the encoder position
     */
    @Override
    public double getMeasurement() {
        return hoodMotor.getSelectedSensorPosition();
    }

    public void hoodPeriodic() {
        if (Timer.getFPGATimestamp()-this.lastTime > 0.5) {
            // System.out.println("Limit Switch:" + this.limitSwitch.get());
            this.lastTime = Timer.getFPGATimestamp();
        }
    }
}
