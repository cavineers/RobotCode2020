package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.wpiutil.math.MathUtil;
import frc.robot.Constants;
import frc.robot.Robot;

public class Hood extends PIDSubsystem {
    // turntable motor
    public WPI_TalonSRX hoodMotor = new WPI_TalonSRX(Constants.Hood.MotorID);

    // Current setpoint
    private int currentSetpoint;

    private double lastTime = 0.0;

    private DigitalInput limitSwitch = new DigitalInput(Constants.Hood.LimitSwitch);

    public enum HoodAngle {
        HIGH,
        LOW,
        MEDIUM
    }

    /**
     * TurnTable constructor
     */
    public Hood() {
        // Set our PID values
        super(new PIDController(Constants.Hood.kP, Constants.Hood.kI, Constants.Hood.kD));

        // Set the tolerance
        getController().setTolerance(Constants.Hood.tolerance);

        // Encoder
        hoodMotor.setSelectedSensorPosition(0);

        this.lastTime = Timer.getFPGATimestamp();

        // BRAKE
        this.hoodMotor.setNeutralMode(NeutralMode.Brake);
    }

    /**
     * turnToAngle
     * @param angle angle to turn to (in degrees)
     */
    public void turnToAngle(double angle) {
        this.currentSetpoint = ((int)((4096/360)*angle));
        //$ 40:1 Gearbox
        // getController().setP(0.0014);
        // getController().setI(0.0);
        // getController().setD(0.0);

        //$ 4:1 Gearbox
        // getController().setP(0.001);
        // getController().setI(0.0);
        // getController().setD(0.001);

        //$ Other maths stuffs
        getController().setP(0.00017);
        getController().setI(0.0003);
        getController().setD(0.000015);

        // Setpoint
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    /**
     * turn to angle
     * @param ha Desired hood position
     */
    public void turnToAngle(HoodAngle ha) {
        switch (ha) {
            case LOW:
                this.currentSetpoint = 160;
                getController().setP(0.0008991);
                getController().setI(0.0);
                getController().setD(0.0);
                break;
            case MEDIUM:
                this.currentSetpoint = 255;
                getController().setP(0.0015);
                getController().setI(0.0);
                getController().setD(0.0000000000000000000000000000000000000000001);
                break;
            case HIGH:
                this.currentSetpoint = 350;
                getController().setP(0.00127);
                getController().setI(0.0);
                getController().setD(0.000000000000000000000000000000000000000001);
                break;
        }
        setSetpoint(this.currentSetpoint);
        getController().setSetpoint(this.currentSetpoint);
    }

    /**
     * atTarget
     * @return whether we are at target
     */
    public boolean atTarget() {
        boolean r = (this.currentSetpoint-5<getMeasurement() && this.currentSetpoint+5>getMeasurement());
        return r;
    }

    /**
     * Use the output generated by the PID
     */
    @Override
    public void useOutput(double output, double setpoint) {
        // Debugging logs
        // System.out.println("CurrentPos: " + getMeasurement());
        // System.out.println("Wanted: " + this.currentSetpoint);
        // System.out.println("OUTPUT: " +  output);

        // Output
        this.hoodMotor.set(MathUtil.clamp(-output,-Constants.Hood.MaxSpeed,Constants.Hood.MaxSpeed));
    }

    /**
     * Get the encoder position
     */
    @Override
    public double getMeasurement() {
        return -hoodMotor.getSelectedSensorPosition();
    }

    public void hoodPeriodic() {
        if (Timer.getFPGATimestamp()-this.lastTime > 0.2) {
            // System.out.println("Limit Switch:" + this.limitSwitch.get());
            // System.out.println(this.hoodMotor.getSelectedSensorPosition());
            this.lastTime = Timer.getFPGATimestamp();
        }

        // System.out.println("Actual: " + this.hoodMotor.getSelectedSensorPosition());
    }

    public boolean getLimitSwitch() {
        return !this.limitSwitch.get();
    }
}
